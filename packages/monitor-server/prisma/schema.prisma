// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Listing {
  id                String @id @default(uuid())
  price             Decimal @db.Decimal(90,0)
  erc20TokenAddress String
  erc20TokenName    String

  // relations back to referencing models
  itemListed   NftMarketplace__ItemListed?
  itemCanceled NftMarketplace__ItemCanceled?
  itemBought   NftMarketplace__ItemBought?
  activeItem   ActiveItem?
  Offer        Offer?
}

model Offer {
  id         String @id @default(uuid())
  offerId    BigInt
  buyer      String
  nftAddress String
  tokenId    BigInt
  chainId    BigInt

  @@unique([chainId,offerId])

  nft   NFT?    @relation(fields: [nftId], references: [id])
  nftId String?

  // relation to Listing
  listingId String  @unique
  listing   Listing @relation(fields: [listingId], references: [id])

  itemOfferMade NftMarketplace__ItemOfferMade?
  itemOfferCanceled NftMarketplace__ItemOfferCanceled?
  itemOfferAccepted NftMarketplace__ItemOfferAccepted?
}

model NftMarketplace__ItemListed {
  id         String @id @default(uuid())
  seller     String
  nftAddress String
  tokenId    BigInt
  chainId    BigInt @default(31337)

  createdAt  DateTime @default(now())

  nft   NFT?    @relation(fields: [nftId], references: [id])
  nftId String?

  listingId String  @unique
  listing   Listing @relation(fields: [listingId], references: [id])

  activeItem ActiveItem?
  itemBought NftMarketplace__ItemBought?
  itemCanceled NftMarketplace__ItemCanceled?
}

model NftMarketplace__ItemTransfered {
  id         String   @id @default(uuid())
  sender     String
  receiver   String
  chainId    BigInt   @default(31337)
  nftAddress String

  nft   NFT?    @relation(fields: [nftId], references: [id])
  nftId String?

  tokenId    BigInt
  createdAt  DateTime @default(now())
}

model NftMarketplace__ItemCanceled {
  id         String @id @default(uuid())
  seller     String
  nftAddress String
  tokenId    BigInt
  chainId    BigInt @default(31337)

  nft   NFT?    @relation(fields: [nftId], references: [id])
  nftId String?
  createdAt  DateTime @default(now())

  listingId String  @unique
  listing   Listing @relation(fields: [listingId], references: [id])

  itemListedId String? @unique
  itemListed NftMarketplace__ItemListed? @relation(fields: [itemListedId],references: [id])
}

model NftMarketplace__ItemBought {
  id         String @id @default(uuid())
  buyer      String
  seller     String?
  nftAddress String
  tokenId    BigInt
  chainId    BigInt @default(31337)

  itemListedId String? @unique
  itemListed NftMarketplace__ItemListed? @relation(fields: [itemListedId],references: [id])


  nft   NFT?    @relation(fields: [nftId], references: [id])
  nftId String?
  createdAt  DateTime @default(now())

  listingId String  @unique
  listing   Listing @relation(fields: [listingId], references: [id])
}

model ActiveItem {
  id         String @id @default(uuid())
  seller     String
  nftAddress String
  tokenId    BigInt
  chainId    BigInt @default(31337)

  nft   NFT?    @relation(fields: [nftId], references: [id])
  nftId String? @unique

  itemListed NftMarketplace__ItemListed? @relation(fields: [itemListedId],references: [id])
  itemListedId String? @unique


  listingId String  @unique
  listing   Listing @relation(fields: [listingId], references: [id])
}

model NftMarketplace__ItemOfferMade {
  id      String @id @default(uuid())
  offerId String @unique
  seller  String?
  chainId BigInt @default(31337)
  createdAt  DateTime @default(now())

  offer      Offer  @relation(fields: [offerId], references: [id])
}

model NftMarketplace__ItemOfferCanceled {
  id      String @id @default(uuid())
  offerId String @unique
  chainId BigInt @default(31337)
  createdAt  DateTime @default(now())

  offer      Offer  @relation(fields: [offerId], references: [id])
}

model NftMarketplace__ItemOfferAccepted {
  id      String @id @default(uuid())
  offerId String @unique
  chainId BigInt @default(31337)
  createdAt  DateTime @default(now())

  offer      Offer  @relation(fields: [offerId], references: [id])
}

model UserProfile {
  id           String  @id @default(uuid())
  address      String  @unique
  username     String?
  bio          String?
  url          String?
  avatar       String?
  banner       String?
  importedNFTs NFT[] // One-to-many relation

   // ðŸ‘€ Watched collections
  watchedCollections Collection[] @relation("UserWatchedCollections")
}

model NFT {
  id              String   @id @default(uuid())
  contractAddress String // NFT contract address
  tokenId         BigInt
  importedAt      DateTime @default(now())

  user   UserProfile @relation(fields: [userId], references: [id])
  userId String

  // ðŸ”— Relation to Collection
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  activeItem ActiveItem?

  offers Offer[]
  itemListed NftMarketplace__ItemListed[]
  itemTransfered NftMarketplace__ItemTransfered[]
  itemCanceled NftMarketplace__ItemCanceled[]
  itemBought NftMarketplace__ItemBought[]

  @@unique([contractAddress, tokenId, collectionId])
}

model Collection {
  id           String   @id @default(uuid())
  address      String   @unique // contract address
  createdAt    DateTime @default(now())
  chainId      BigInt
  category     Category @default(Art)
  description  String?
  nickname     String?
  avatar       String?
  banner       String?
  url          String?
  importedNfts NFT[] // One-to-many relation

  // ðŸ‘€ Users watching this collection
  watchers UserProfile[] @relation("UserWatchedCollections")

  @@unique([address, chainId])
}

enum Category {
  Art
  Gaming
  PFPs
  Photography
  Membership
}
